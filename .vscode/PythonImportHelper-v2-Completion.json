[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AuthResponse",
        "importPath": "src.auth.auth_model",
        "description": "src.auth.auth_model",
        "isExtraImport": true,
        "detail": "src.auth.auth_model",
        "documentation": {}
    },
    {
        "label": "LoginUserModel",
        "importPath": "src.auth.auth_model",
        "description": "src.auth.auth_model",
        "isExtraImport": true,
        "detail": "src.auth.auth_model",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "verify_bearer_token",
        "importPath": "src.auth.auth_service",
        "description": "src.auth.auth_service",
        "isExtraImport": true,
        "detail": "src.auth.auth_service",
        "documentation": {}
    },
    {
        "label": "CreateTaskRequest",
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "isExtraImport": true,
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "TaskResponse",
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "isExtraImport": true,
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "UpdateTaskRequest",
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "isExtraImport": true,
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "CreateTaskRequest",
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "isExtraImport": true,
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "TaskResponse",
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "isExtraImport": true,
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "UpdateTaskRequest",
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "isExtraImport": true,
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "tasks_collection",
        "importPath": "src.config.database",
        "description": "src.config.database",
        "isExtraImport": true,
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "dev",
        "importPath": "fastapi_cli.cli",
        "description": "fastapi_cli.cli",
        "isExtraImport": true,
        "detail": "fastapi_cli.cli",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "database",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "task_router",
        "importPath": "src.task.task_controller",
        "description": "src.task.task_controller",
        "isExtraImport": true,
        "detail": "src.task.task_controller",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "src.auth.auth_controller",
        "description": "src.auth.auth_controller",
        "isExtraImport": true,
        "detail": "src.auth.auth_controller",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "src.auth.auth_controller",
        "description": "src.auth.auth_controller",
        "peekOfCode": "def login(user_data:LoginUserModel):\n    user = user_data.model_dump()\n    return AuthResponse(access_token=os.getenv(\"SECRET_ACCESS_KEY\"),token_type=\"Bearer\",user=user[\"email\"])",
        "detail": "src.auth.auth_controller",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "src.auth.auth_controller",
        "description": "src.auth.auth_controller",
        "peekOfCode": "auth_router = APIRouter(prefix=\"/auth\",tags=[\"Auth\"])\n@auth_router.post(\"/login\",response_model=AuthResponse,status_code=status.HTTP_200_OK)\ndef login(user_data:LoginUserModel):\n    user = user_data.model_dump()\n    return AuthResponse(access_token=os.getenv(\"SECRET_ACCESS_KEY\"),token_type=\"Bearer\",user=user[\"email\"])",
        "detail": "src.auth.auth_controller",
        "documentation": {}
    },
    {
        "label": "LoginUserModel",
        "kind": 6,
        "importPath": "src.auth.auth_model",
        "description": "src.auth.auth_model",
        "peekOfCode": "class LoginUserModel(BaseModel):\n    email:EmailStr\n    password:str\nclass AuthResponse(BaseModel):\n    access_token:str\n    token_type:str = \"JWT / Bearer\"\n    user:EmailStr",
        "detail": "src.auth.auth_model",
        "documentation": {}
    },
    {
        "label": "AuthResponse",
        "kind": 6,
        "importPath": "src.auth.auth_model",
        "description": "src.auth.auth_model",
        "peekOfCode": "class AuthResponse(BaseModel):\n    access_token:str\n    token_type:str = \"JWT / Bearer\"\n    user:EmailStr",
        "detail": "src.auth.auth_model",
        "documentation": {}
    },
    {
        "label": "verify_bearer_token",
        "kind": 2,
        "importPath": "src.auth.auth_service",
        "description": "src.auth.auth_service",
        "peekOfCode": "def verify_bearer_token(bearer_token:Annotated[HTTPAuthorizationCredentials,Depends(bearer_auth)]):\n    if bearer_token.scheme == \"Bearer\" and bearer_token.credentials == os.getenv(\"SECRET_ACCESS_KEY\"):\n        return {\"token\":bearer_token.credentials }\n    raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail=\"Invalid Bearer Token\")\ndef create_jwt_token():\n    pass\ndef verify_jwt_token():\n    pass",
        "detail": "src.auth.auth_service",
        "documentation": {}
    },
    {
        "label": "create_jwt_token",
        "kind": 2,
        "importPath": "src.auth.auth_service",
        "description": "src.auth.auth_service",
        "peekOfCode": "def create_jwt_token():\n    pass\ndef verify_jwt_token():\n    pass",
        "detail": "src.auth.auth_service",
        "documentation": {}
    },
    {
        "label": "verify_jwt_token",
        "kind": 2,
        "importPath": "src.auth.auth_service",
        "description": "src.auth.auth_service",
        "peekOfCode": "def verify_jwt_token():\n    pass",
        "detail": "src.auth.auth_service",
        "documentation": {}
    },
    {
        "label": "bearer_auth",
        "kind": 5,
        "importPath": "src.auth.auth_service",
        "description": "src.auth.auth_service",
        "peekOfCode": "bearer_auth = HTTPBearer()\ndef verify_bearer_token(bearer_token:Annotated[HTTPAuthorizationCredentials,Depends(bearer_auth)]):\n    if bearer_token.scheme == \"Bearer\" and bearer_token.credentials == os.getenv(\"SECRET_ACCESS_KEY\"):\n        return {\"token\":bearer_token.credentials }\n    raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail=\"Invalid Bearer Token\")\ndef create_jwt_token():\n    pass\ndef verify_jwt_token():\n    pass",
        "detail": "src.auth.auth_service",
        "documentation": {}
    },
    {
        "label": "get_tasks",
        "kind": 2,
        "importPath": "src.task.task_controller",
        "description": "src.task.task_controller",
        "peekOfCode": "def get_tasks():\n    return task_service.get_tasks()\n@task_router.get(\"/{id}\",response_model=TaskResponse,status_code=status.HTTP_200_OK)\ndef get_task(id:str):\n    return task_service.get_task(id)\n@task_router.post(\"\",response_model=TaskResponse,status_code=status.HTTP_201_CREATED)\ndef create_task(task_data:CreateTaskRequest):\n    return task_service.create_task(task_data)\n@task_router.patch(\"/{id}\",response_model=TaskResponse,status_code=status.HTTP_200_OK)\ndef update_task(id:str,task_data:UpdateTaskRequest):",
        "detail": "src.task.task_controller",
        "documentation": {}
    },
    {
        "label": "get_task",
        "kind": 2,
        "importPath": "src.task.task_controller",
        "description": "src.task.task_controller",
        "peekOfCode": "def get_task(id:str):\n    return task_service.get_task(id)\n@task_router.post(\"\",response_model=TaskResponse,status_code=status.HTTP_201_CREATED)\ndef create_task(task_data:CreateTaskRequest):\n    return task_service.create_task(task_data)\n@task_router.patch(\"/{id}\",response_model=TaskResponse,status_code=status.HTTP_200_OK)\ndef update_task(id:str,task_data:UpdateTaskRequest):\n    return task_service.update_task(id,task_data)\n@task_router.delete(\"/{id}\",response_model=TaskResponse,status_code=status.HTTP_200_OK)\ndef delete_task(id:str):",
        "detail": "src.task.task_controller",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "src.task.task_controller",
        "description": "src.task.task_controller",
        "peekOfCode": "def create_task(task_data:CreateTaskRequest):\n    return task_service.create_task(task_data)\n@task_router.patch(\"/{id}\",response_model=TaskResponse,status_code=status.HTTP_200_OK)\ndef update_task(id:str,task_data:UpdateTaskRequest):\n    return task_service.update_task(id,task_data)\n@task_router.delete(\"/{id}\",response_model=TaskResponse,status_code=status.HTTP_200_OK)\ndef delete_task(id:str):\n    return task_service.delete_task(id)",
        "detail": "src.task.task_controller",
        "documentation": {}
    },
    {
        "label": "update_task",
        "kind": 2,
        "importPath": "src.task.task_controller",
        "description": "src.task.task_controller",
        "peekOfCode": "def update_task(id:str,task_data:UpdateTaskRequest):\n    return task_service.update_task(id,task_data)\n@task_router.delete(\"/{id}\",response_model=TaskResponse,status_code=status.HTTP_200_OK)\ndef delete_task(id:str):\n    return task_service.delete_task(id)",
        "detail": "src.task.task_controller",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "src.task.task_controller",
        "description": "src.task.task_controller",
        "peekOfCode": "def delete_task(id:str):\n    return task_service.delete_task(id)",
        "detail": "src.task.task_controller",
        "documentation": {}
    },
    {
        "label": "task_router",
        "kind": 5,
        "importPath": "src.task.task_controller",
        "description": "src.task.task_controller",
        "peekOfCode": "task_router = APIRouter(prefix=\"/tasks\",tags=[\"Tasks\"],dependencies=[Depends(verify_bearer_token)])\n# guard = Annotated[dict,Depends(verify_bearer_token)]\n@task_router.get(\"\",response_model=TaskResponse,status_code=status.HTTP_200_OK)\ndef get_tasks():\n    return task_service.get_tasks()\n@task_router.get(\"/{id}\",response_model=TaskResponse,status_code=status.HTTP_200_OK)\ndef get_task(id:str):\n    return task_service.get_task(id)\n@task_router.post(\"\",response_model=TaskResponse,status_code=status.HTTP_201_CREATED)\ndef create_task(task_data:CreateTaskRequest):",
        "detail": "src.task.task_controller",
        "documentation": {}
    },
    {
        "label": "CreateTaskRequest",
        "kind": 6,
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "peekOfCode": "class CreateTaskRequest(BaseModel):\n    name:str\n    description:Optional[str] = None\nclass UpdateTaskRequest(BaseModel):\n    name:Optional[str] = None\n    description:Optional[str] = None\nclass TaskResponseModel(BaseModel):\n    id:str\n    name:str\n    description:Optional[str] = None",
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "UpdateTaskRequest",
        "kind": 6,
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "peekOfCode": "class UpdateTaskRequest(BaseModel):\n    name:Optional[str] = None\n    description:Optional[str] = None\nclass TaskResponseModel(BaseModel):\n    id:str\n    name:str\n    description:Optional[str] = None\nclass TaskResponse(BaseModel):\n    data:TaskResponseModel | list[TaskResponseModel]",
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "TaskResponseModel",
        "kind": 6,
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "peekOfCode": "class TaskResponseModel(BaseModel):\n    id:str\n    name:str\n    description:Optional[str] = None\nclass TaskResponse(BaseModel):\n    data:TaskResponseModel | list[TaskResponseModel]",
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "TaskResponse",
        "kind": 6,
        "importPath": "src.task.task_model",
        "description": "src.task.task_model",
        "peekOfCode": "class TaskResponse(BaseModel):\n    data:TaskResponseModel | list[TaskResponseModel]",
        "detail": "src.task.task_model",
        "documentation": {}
    },
    {
        "label": "get_tasks",
        "kind": 2,
        "importPath": "src.task.task_service",
        "description": "src.task.task_service",
        "peekOfCode": "def get_tasks():\n    tasks = list(tasks_collection.find())\n    # return {\"data\":[{**task,\"id\":str(task[\"_id\"])} for task in tasks]}\n    return TaskResponse(data=[{**task,\"id\":str(task[\"_id\"])} for task in tasks])\ndef get_task(id:str):\n    task = tasks_collection.find_one({\"_id\":ObjectId(id)})\n    if not task:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail=\"Task not found\")\n    # return {\"data\":{**task,\"id\":str(task[\"_id\"])}}\n    return TaskResponse(data={**task,\"id\":str(task[\"_id\"])})",
        "detail": "src.task.task_service",
        "documentation": {}
    },
    {
        "label": "get_task",
        "kind": 2,
        "importPath": "src.task.task_service",
        "description": "src.task.task_service",
        "peekOfCode": "def get_task(id:str):\n    task = tasks_collection.find_one({\"_id\":ObjectId(id)})\n    if not task:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail=\"Task not found\")\n    # return {\"data\":{**task,\"id\":str(task[\"_id\"])}}\n    return TaskResponse(data={**task,\"id\":str(task[\"_id\"])})\ndef create_task(task_data:CreateTaskRequest):\n    new_task = tasks_collection.insert_one(task_data.model_dump())\n    created_task = tasks_collection.find_one({\"_id\":new_task.inserted_id})\n    # return {\"data\":{**created_task,\"id\":str(created_task[\"_id\"])}}",
        "detail": "src.task.task_service",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "src.task.task_service",
        "description": "src.task.task_service",
        "peekOfCode": "def create_task(task_data:CreateTaskRequest):\n    new_task = tasks_collection.insert_one(task_data.model_dump())\n    created_task = tasks_collection.find_one({\"_id\":new_task.inserted_id})\n    # return {\"data\":{**created_task,\"id\":str(created_task[\"_id\"])}}\n    return TaskResponse(data={**created_task,\"id\":str(created_task[\"_id\"])})\ndef update_task(id:str,task_data:UpdateTaskRequest):\n    update_task_data = task_data.model_dump(exclude_unset=True)\n    if len(update_task_data.keys()) == 0:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,detail=\"No valid data to update\")\n    updated_task = tasks_collection.find_one_and_update({\"_id\":ObjectId(id)},{\"$set\":update_task_data},return_document=True)",
        "detail": "src.task.task_service",
        "documentation": {}
    },
    {
        "label": "update_task",
        "kind": 2,
        "importPath": "src.task.task_service",
        "description": "src.task.task_service",
        "peekOfCode": "def update_task(id:str,task_data:UpdateTaskRequest):\n    update_task_data = task_data.model_dump(exclude_unset=True)\n    if len(update_task_data.keys()) == 0:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,detail=\"No valid data to update\")\n    updated_task = tasks_collection.find_one_and_update({\"_id\":ObjectId(id)},{\"$set\":update_task_data},return_document=True)\n    if not updated_task:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail=\"Task not found\")\n    # return {\"data\":{**updated_task,\"id\":str(updated_task[\"_id\"])}}\n    return TaskResponse(data={**updated_task,\"id\":str(updated_task[\"_id\"])})\ndef delete_task(id:str):",
        "detail": "src.task.task_service",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "src.task.task_service",
        "description": "src.task.task_service",
        "peekOfCode": "def delete_task(id:str):\n    deleted_task = tasks_collection.find_one_and_delete({\"_id\":ObjectId(id)})\n    if not delete_task:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail=\"Task not found\")\n    # return {\"data\":{**deleted_task,\"id\":str(deleted_task[\"_id\"])}}\n    return TaskResponse(data={**deleted_task,\"id\":str(deleted_task[\"_id\"])})",
        "detail": "src.task.task_service",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Response(BaseModel):\n    data:str\n@app.get(\"/\",tags=[\"Default\"],response_model=Response)\ndef root():\n    print(f'-- DB Name : {database}')\n    return Response(data=\"API is running\")\n# if __name__ == \"__main__\":\n#     # uvicorn.run(\"main:app\", host=\"127.0.0.1\", port=3000, reload=True)\n#     dev(port=3000,host=\"127.0.0.1\",reload=True,path=Path(\"main.py\"))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def root():\n    print(f'-- DB Name : {database}')\n    return Response(data=\"API is running\")\n# if __name__ == \"__main__\":\n#     # uvicorn.run(\"main:app\", host=\"127.0.0.1\", port=3000, reload=True)\n#     dev(port=3000,host=\"127.0.0.1\",reload=True,path=Path(\"main.py\"))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"FastAPI + MongoDB\",version=\"0.0.1\")\napp.include_router(task_router)\napp.include_router(auth_router)\nclass Response(BaseModel):\n    data:str\n@app.get(\"/\",tags=[\"Default\"],response_model=Response)\ndef root():\n    print(f'-- DB Name : {database}')\n    return Response(data=\"API is running\")\n# if __name__ == \"__main__\":",
        "detail": "main",
        "documentation": {}
    }
]